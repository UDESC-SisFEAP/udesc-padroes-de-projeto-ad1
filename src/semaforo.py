"""
MÃ³dulo contendo o Contexto (Context) do padrÃ£o State: a classe Semaforo.
"""

from __future__ import annotations
from typing import Optional

from .states import EstadoSemaforo, EstadoVermelho


class Semaforo:
    """
    O Contexto (Context) do padrÃ£o State.
    
    Este Ã© o objeto principal (nosso SemÃ¡foro) cujo comportamento
    mudarÃ¡ dinamicamente com base no estado interno atual.
    
    O Semaforo mantÃ©m uma referÃªncia ao seu estado atual e delega
    todas as operaÃ§Ãµes especÃ­ficas de estado para o objeto de estado.
    
    Attributes:
        _estado: O estado atual do semÃ¡foro.
    """
    
    def __init__(self) -> None:
        """
        Inicializa o semÃ¡foro.
        
        O semÃ¡foro sempre comeÃ§a no estado 'Vermelho' por questÃµes
        de seguranÃ§a no trÃ¢nsito.
        """
        self._estado: Optional[EstadoSemaforo] = None
        # O semÃ¡foro comeÃ§a no estado 'Vermelho'
        self.transicionar_para(EstadoVermelho())

    def transicionar_para(self, estado: EstadoSemaforo) -> None:
        """
        Permite a transiÃ§Ã£o para um novo estado.
        
        Este mÃ©todo Ã© chamado tanto internamente (durante a inicializaÃ§Ã£o)
        quanto pelos prÃ³prios estados (quando decidem transicionar).
        
        Args:
            estado: O novo estado para o qual o semÃ¡foro deve transicionar.
        """
        print(f"\nðŸš¦ SISTEMA: Trocando para o estado {type(estado).__name__}")
        self._estado = estado
        self._estado.contexto = self  # Fornece ao estado acesso ao contexto

    def avancar(self) -> None:
        """
        AvanÃ§a o semÃ¡foro para o prÃ³ximo estado.
        
        A lÃ³gica especÃ­fica de qual Ã© o prÃ³ximo estado Ã© delegada
        ao objeto de estado atual atravÃ©s do mÃ©todo avancar().
        """
        if self._estado is None:
            raise RuntimeError("Estado do semÃ¡foro nÃ£o foi inicializado!")
        
        self._estado.avancar()

    def mostrar_cor(self) -> None:
        """
        Exibe a cor atual do semÃ¡foro.
        
        O comportamento especÃ­fico de como mostrar a cor Ã© delegado
        ao objeto de estado atual atravÃ©s do mÃ©todo mostrar_cor().
        """
        if self._estado is None:
            raise RuntimeError("Estado do semÃ¡foro nÃ£o foi inicializado!")
        
        self._estado.mostrar_cor()

    @property
    def estado_atual(self) -> str:
        """
        Retorna o nome do estado atual.
        
        Returns:
            String com o nome da classe do estado atual.
        """
        if self._estado is None:
            return "NÃ£o inicializado"
        return type(self._estado).__name__
